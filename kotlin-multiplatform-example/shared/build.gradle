apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setup Kotlin multi-platform
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

kotlin {
    targets {
        def is32Bit = project.findProperty("is32bit")?.toBoolean() ?: false
        def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
        def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64

        iosPreset = (is32Bit) ? presets.iosArm32 : iosPreset
        fromPreset(iosPreset, 'iOS') {
            binaries {
                framework('SACommonLib') {
                    // Disable bitcode embedding for the simulator build.
                    if (!buildForDevice) {
                        embedBitcode("disable")
                    }
                }
            }
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {

        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }

        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }

        androidTest {
            dependsOn androidMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            }
        }

        iOSMain {
            dependsOn commonMain
            dependencies {
            }
        }

        iOSTest {
            dependsOn iOSMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setup Android specific info for androidMain sub-library
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
    }

    testOptions.unitTests.includeAndroidResources = true
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// workaround for https://youtrack.jetbrains.com/issue/KT-27170
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

configurations {
    compileClasspath
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// pack for XCode
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone XR"
    dependsOn 'linkTestDebugExecutableIOS'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.iOS.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "linkSACommonLib${buildType.toLowerCase().capitalize()}FrameworkIOS"

    doLast {
        def srcFile = kotlin.targets.iOS.binaries.getFramework('SACommonLib', buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'SACommonLib.framework/**'
            include 'SACommonLib.framework.dSYM'
        }
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework("SACommonLib", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode
